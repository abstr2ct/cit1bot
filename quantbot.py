import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, Sticker
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData

API_TOKEN = '7681732840:AAH21CATzaJNXfIDOyxyWXJy5APw_IAAocA'
WEATHER_API_KEY = 'c69802765d76a5eae88e63d4ca620e7c'
BASE_URL = "http://api.openweathermap.org/data/2.5/weather"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_password = State()
    waiting_for_phone = State()
    checking_password = State()

users_db = {}

@dp.message(Command('start'))
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –∏–ª–∏ '–æ—Ç–∫–∞–∑'. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–∫–∞–∑'.")
    await state.set_state(UserStates.waiting_for_name)

@dp.message(UserStates.waiting_for_name)
async def handle_name(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–∫–∞–∑":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
    await state.set_state(UserStates.waiting_for_password)

@dp.message(UserStates.waiting_for_password)
async def handle_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    await message.answer("–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    await state.set_state(UserStates.waiting_for_phone)

@dp.message(UserStates.waiting_for_phone)
async def handle_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    user_data = await state.get_data()
    users_db[message.from_user.id] = {
        'name': user_data['name'],
        'password': user_data['password'],
        'phone': user_data['phone']
    }
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /pull –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
    await state.clear()

@dp.message(Command('pull'))
async def pull(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(UserStates.checking_password)

@dp.message(UserStates.checking_password)
async def check_password(message: Message, state: FSMContext):
    username = message.text
    await state.update_data(username=username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(UserStates.waiting_for_password)

@dp.message(UserStates.waiting_for_password)
async def validate_password(message: Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    username = user_data.get('username')
    if username in users_db and users_db[username]['password'] == password:
        await message.answer("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í–æ—Ç –≤–∞—à —Å—Ç–∏–∫–µ—Ä:", reply_markup=None)
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEB3J9fkdgVjFiXDJYH_xEej1hH4QshqgACmQsAAlMebQ3y57W7oxu9cAI")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

async def get_weather(city):
    params = {
        'q': city,
        'appid': WEATHER_API_KEY,
        'units': 'metric',
        'lang': 'ru'
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(BASE_URL, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    description = data['weather'][0]['description']
                    temp = data['main']['temp']
                    wind_speed = data['wind']['speed']
                    humidity = data['main']['humidity']
                    weather_emoji = "‚òÄÔ∏è" if "clear" in description else "‚òÅÔ∏è" if "cloud" in description else "üåßÔ∏è"
                    wind_emoji = "üí®"
                    humidity_emoji = "üíß"
                    return (f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {weather_emoji}\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                            f"{wind_emoji} –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                            f"{humidity_emoji} –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")
                else:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –°—Ç–∞—Ç—É—Å: {response.status}"

    except Exception as e:
        logging.error(f"Error fetching weather: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

if __name__ == '__main__':
    dp.run_polling(bot)
